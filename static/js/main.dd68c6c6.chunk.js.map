{"version":3,"sources":["pages/Login.js","actions/index.js","actions/actionTypes.js","components/Currency.js","components/LabelSelect.js","components/LabelInput.js","components/Form.js","components/Header.js","components/TableTd.js","components/Table.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/store.js","index.js"],"names":["Login","props","state","email","password","buttonOn","submitStore","bind","getInputValue","form","e","target","name","this","setState","value","result","test","length","submit","preventDefault","onSubmit","type","data-testid","placeholder","onChange","required","to","disabled","onClick","React","Component","connect","dispathc","userAccess","Currency","htmlFor","nome","array","id","Object","keys","map","item","key","LabelSelect","LabelInput","Form","description","currency","method","tag","getCrurrencies","inputValue","qualquer","fetch","then","data","json","response","arrayKeys","gastos","exchangeRates","currencies","newCurrencies","USDT","className","wallet","formWallet","Header","totalExpenses","toFixed","TableTd","table","expenses","entries","filter","array2","ask","counter","deletItem","Table","hearder","index","Wallet","submitCurrencies","arr","total2","user","dispatch","catch","err","App","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","action","erro","error","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"8VAOMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,GACPC,SAAU,GACVC,UAAU,GAGZ,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,KAAO,EAAKA,KAAKF,KAAV,gBAVK,E,iDAanB,SAAcG,GACZ,OAAQA,EAAEC,OAAOC,MACjB,IAAK,QAASC,KAAKC,SAAS,CAC1BX,MAAOO,EAAEC,OAAOI,MAChBV,UAAU,IAEV,MACF,IAAK,WAAYQ,KAAKC,SAAS,CAC7BV,SAAUM,EAAEC,OAAOI,QAKrB,MAA4BF,KAAKX,MAAzBE,EAAR,EAAQA,SAAUD,EAAlB,EAAkBA,MAIZa,EAFQ,8BAEOC,KAAKd,GAEtBC,EAASc,QALI,GAKkBF,GACjCH,KAAKC,SAAS,CACZT,UAAU,M,yBAKhB,YAGEc,EAFmBN,KAAKZ,MAAhBkB,QAED,CACLhB,MAFgBU,KAAKX,MAAfC,U,kBAMV,SAAKO,GACHA,EAAEU,iBACFP,KAAKC,SAAS,CACZX,MAAO,GACPC,SAAU,O,oBAId,WACE,MAAsCS,KAAKX,MAAnCG,EAAR,EAAQA,SAAUF,EAAlB,EAAkBA,MAAOC,EAAzB,EAAyBA,SACzB,OACE,6BACE,0BAAMiB,SAAWR,KAAKJ,MACpB,qCACA,2BACEa,KAAK,QACLV,KAAK,QACLG,MAAQZ,EACRoB,cAAY,cACZC,YAAY,mBACZC,SAAWZ,KAAKL,cAChBkB,UAAQ,IAEV,2BACEJ,KAAK,WACLV,KAAK,WACLG,MAAQX,EACRmB,cAAY,iBACZE,SAAWZ,KAAKL,cAChBkB,UAAQ,IAEV,kBAAC,IAAD,CAAMC,GAAG,aACP,4BACEL,KAAK,SACLM,UAAYvB,EACZwB,QAAUhB,KAAKP,aAHjB,iB,GAhFQwB,IAAMC,WAqGXC,cAAQ,MAPI,SAACC,GAAD,MAAe,CACxCd,OAAQ,SAACjB,GAAD,OAAW+B,EC9FK,SAAC/B,GAAD,MAAY,CACpCoB,KCTkB,ODUlBpB,SD4F4BgC,CAAWhC,QAM1B8B,CAAkChC,G,QG1ElCmC,E,4JA9Bb,WACE,MAC0BtB,KAAKZ,MADvBmC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KACfC,EADF,EACEA,MAAOC,EADT,EACSA,GAAId,EADb,EACaA,SACb,OACE,6BACE,2BAAOW,QAAUA,GACdC,EACD,4BAAQzB,KAAOyB,EAAOE,GAAKA,EAAKd,SAAWA,GACxCe,OAAOC,KAAKH,GAAOI,KAAI,SAACC,GAAD,OACtB,4BACEC,IAAMD,EACN5B,MAAQ4B,GAENA,a,GAdKZ,aCyBRc,E,4JAxBb,WACE,MAC0BhC,KAAKZ,MADvBmC,EAAR,EAAQA,QACNE,EADF,EACEA,MAAOD,EADT,EACSA,KAAM1B,EADf,EACeA,OACf,OACE,6BACE,2BAAOyB,QAAUA,GACdC,EACD,4BAAQzB,KAAOyB,EAAOE,GAAKF,EAAOZ,SAAWd,GAC1C2B,EAAMI,KAAI,SAACC,GAAD,OACT,4BAAQC,IAAMD,EAAO5B,MAAQ4B,GAAQA,a,GAVzBZ,aCyBXe,E,4JAxBb,WACE,MAAwCjC,KAAKZ,MAArCmC,EAAR,EAAQA,QAASd,EAAjB,EAAiBA,KAAMiB,EAAvB,EAAuBA,GAAId,EAA3B,EAA2BA,SAC3B,OACE,6BACE,2BAAOW,QAAUA,GACdG,EACD,2BACEjB,KAAOA,EACPV,KAAO2B,EACPA,GAAKA,EACLd,SAAWA,U,GAXEM,aCMnBgB,G,wDACJ,WAAY9C,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXqC,GAAI,EACJxB,MAAO,GACPiC,YAAa,GACbC,SAAU,MACVC,OAAQ,WACRC,IAAK,qBAEP,EAAKC,eAAiB,EAAKA,eAAe7C,KAApB,gBACtB,EAAK8C,WAAa,EAAKA,WAAW9C,KAAhB,gBAClB,EAAKD,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAK+C,SAAW,EAAKA,SAAS/C,KAAd,gBAbC,E,kDAgBnB,WAAkB,IAAD,OAEfgD,MADiB,+CAEdC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OAAc,EAAKL,SAASK,Q,sBAGtC,SAASF,GACP,IAAMG,EAAS,eAAQH,GACvB5C,KAAKP,YAAYsD,K,wBAGnB,SAAWlD,GACT,OAAQA,EAAEC,OAAOC,MACjB,IAAK,QAASC,KAAKC,SAAS,CAAEC,MAAOL,EAAEC,OAAOI,QAC5C,MACF,IAAK,yBAAuBF,KAAKC,SAAS,CAAEoC,OAAQxC,EAAEC,OAAOI,QAC3D,MACF,IAAK,QAASF,KAAKC,SAAS,CAAEmC,SAAUvC,EAAEC,OAAOI,QAC/C,MACF,IAAK,MAAOF,KAAKC,SAAS,CAAEqC,IAAKzC,EAAEC,OAAOI,QACxC,MACF,IAAK,kBAAaF,KAAKC,SAAS,CAAEkC,YAAatC,EAAEC,OAAOI,W,yBAM1D,SAAY0C,GACV,MAA0D5C,KAAKX,MAAvDqC,EAAR,EAAQA,GAAIxB,EAAZ,EAAYA,MAAOiC,EAAnB,EAAmBA,YAAaC,EAAhC,EAAgCA,SAAUC,EAA1C,EAA0CA,OAAQC,EAAlD,EAAkDA,IAClD,EAA2BtC,KAAKZ,MAAxBkB,EAAR,EAAQA,OAAQ0C,EAAhB,EAAgBA,OAChB1C,EAAO,CACLoB,KACAxB,QACAkC,WACAC,SACAC,MACAH,cACAc,cAAeL,IAEjBI,IACAhD,KAAKC,SAAS,CAAEyB,GAAKA,EAAK,M,oBAG5B,WACE,IAAQwB,EAAelD,KAAKZ,MAApB8D,WACFC,EAAa,eAAQD,UACpBC,EAAcC,KAGrB,OACE,0BAAMC,UAAU,QACd,kBAAC,EAAD,CACE9B,QAAQ,QACRd,KAAK,OACLe,KAAK,QACLE,GAAG,QACHd,SAAWZ,KAAKwC,aAElB,kBAAC,EAAD,CACEjB,QAAQ,QACRG,GAAG,QACHF,KAAK,QACLC,MAAQ0B,EACRvC,SAAWZ,KAAKwC,aAElB,kBAAC,EAAD,CACEjB,QAAQ,yBACRC,KAAK,yBACLC,MArBU,CAAC,WAAY,0BAAqB,0BAsB5C3B,OAASE,KAAKwC,aAEhB,kBAAC,EAAD,CACEjB,QAAQ,MACRC,KAAK,MACLC,MA1BO,CAAC,oBAAe,QAAS,WAAY,aAAc,YA2B1D3B,OAASE,KAAKwC,aAEhB,kBAAC,EAAD,CACEjB,QAAQ,kBACRd,KAAK,OACLiB,GAAG,kBACHd,SAAWZ,KAAKwC,aAElB,4BACE/B,KAAK,SACLO,QAAUhB,KAAKuC,gBAFjB,0B,GArGWrB,cA8IJC,eA1BS,SAAC9B,GAAD,MAAY,CAClC6D,WAAY7D,EAAMiE,OAAOJ,eALA,SAAC9B,GAAD,MAAe,CACxCd,OAAQ,SAACjB,GAAD,OAAW+B,ELvHK,SAAC/B,GAAD,MAAY,CACpCoB,KCHwB,ODIxBpB,SKqH4BkE,CAAWlE,QA6B1B8B,CAA6Ce,GCzH7CsB,E,4JA1Bb,WACE,MAAiCxD,KAAKZ,MAA9BE,EAAR,EAAQA,MAAOmE,EAAf,EAAeA,cACf,OACE,gCACE,0BAAM/C,cAAY,eAAlB,SAEIpB,GAEJ,4CAEE,0BAAMoB,cAAY,eACd+C,EAAcC,QAAQ,KAG5B,0BAAMhD,cAAY,yBAAlB,Y,GAfaQ,aCEfyC,G,wDACJ,WAAYvE,GAAQ,IAAD,8BACjB,cAAMA,IACDwE,MAAQ,EAAKA,MAAMlE,KAAX,gBACb,EAAK0B,SAAW,EAAKA,SAAS1B,KAAd,gBAHC,E,4CAMnB,WACE,IAAkBmE,EAAe7D,KAAKZ,MAA9BkE,OAAUO,SAClB,EAA2B7D,KAAKZ,MAAxBkB,EAAR,EAAQA,OAAQ0C,EAAhB,EAAgBA,OAChB1C,EAAOuD,EAAS,IAChBb,M,mBAGF,WACE,IAAkBa,EAAe7D,KAAKZ,MAA9BkE,OAAUO,SAElB,GAAIA,EAASxD,OAAS,EAAG,CACvB,IAAQ4C,EAAkBY,EAAS,GAA3BZ,cACFxB,EAAQE,OAAOmC,QAAQb,GAC1Bc,QAAO,SAACjC,GAAD,OAAUA,EAAK,KAAO+B,EAAS,GAAGzB,YACtC4B,EAASvC,EAAM,GAAG,GAAGwC,IAC3B,OACE,4BACE,4BAAKJ,EAAS,GAAG1B,aACjB,4BAAK0B,EAAS,GAAGvB,KACjB,4BAAKuB,EAAS,GAAGxB,QACjB,4BAAKwB,EAAS,GAAG3D,OACjB,4BAAKuB,EAAM,GAAG,GAAG1B,MACjB,8BAAOiE,GAAQN,QAAQ,IACvB,6BAAMG,EAAS,GAAG3D,MAAQuB,EAAM,GAAG,GAAGwC,KAAKP,QAAQ,IACnD,4BAAI,oCACJ,4BACE,4BACEjD,KAAK,SACLC,cAAY,aACZM,QAAUhB,KAAKoB,UAHjB,c,oBAaV,WACE,MAA0CpB,KAAKZ,MAA7ByE,EAAlB,EAAQP,OAAUO,SAAYK,EAA9B,EAA8BA,QACtBjB,EAAkBY,EAAS,GAA3BZ,cACFxB,EAAQE,OAAOmC,QAAQb,GAC1Bc,QAAO,SAACjC,GAAD,OAAUA,EAAK,KAAO+B,EAAS,GAAGzB,YACtC4B,EAASvC,EAAMyC,GAAS,GAAGD,IACjC,OACE,oCACE,4BACE,4BAAKJ,EAASK,GAAS/B,aACvB,4BAAK0B,EAASK,GAAS5B,KACvB,4BAAKuB,EAASK,GAAS7B,QACvB,4BAAKwB,EAASK,GAAShE,OACvB,4BAAKuB,EAAMyC,GAAS,GAAGnE,MACvB,8BAAOiE,GAAQN,QAAQ,IACvB,6BAAMG,EAASK,GAAShE,MAAQuB,EAAMyC,GAAS,GAAGD,KAAKP,QAAQ,IAC/D,4BAAI,oCACJ,4BACE,4BACEjD,KAAK,SACLC,cAAY,aACZM,QAAUhB,KAAKoB,UAHjB,WASFpB,KAAK4D,a,GAzEO1C,cAgGPC,eAjBS,SAAC9B,GAAD,MAAY,CAClCiE,OAAQjE,EAAMiE,WAGW,SAAClC,GAAD,MAAe,CACxCd,OAAQ,SAACjB,GAAD,OAAW+B,EP9DI,SAAC/B,GAAD,MAAY,CACnCoB,KC1ByB,cD2BzBpB,SO4D4B8E,CAAU9E,QAYzB8B,CAA6CwC,GC/FtDS,E,kDACJ,WAAYhF,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXgF,QAAS,CAAC,kBAAa,MACrB,yBAAuB,QACvB,QAAS,sBAAoB,mBAC7B,wBAAsB,mBANT,E,0CAUnB,WACE,IAAQA,EAAYrE,KAAKX,MAAjBgF,QACR,EAAyCrE,KAAKZ,MAA5ByE,EAAlB,EAAQP,OAAUO,SAAYb,EAA9B,EAA8BA,OAC9B,OAAIa,EAASxD,OAAS,EAElB,2BAAOgD,UAAU,SACf,+BACE,4BACGgB,EAAQxC,KAAI,SAACC,EAAMwC,GAAP,OAAkB,wBAAIvC,IAAMuC,GAASxC,QAGtD,+BACE,kBAAC,EAAD,CACEoC,QAAU,EACVlB,OAASA,MAMX,S,GA/BQ9B,aA8CLC,eAXS,SAAC9B,GAAD,MAAY,CAClCiE,OAAQjE,EAAMiE,UAUDnC,CAAyBiD,GC3ClCG,E,kDACJ,WAAYnF,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXoE,cAAe,GAEjB,EAAKT,OAAS,EAAKA,OAAOtD,KAAZ,gBALG,E,qDAQnB,YAEE8E,EAD6BxE,KAAKZ,MAA1BoF,sB,oBAIV,WACE,IAAkBX,EAAe7D,KAAKZ,MAA9BkE,OAAUO,SAClB,GAAIA,EAASxD,OAAS,GAAKwD,EAASxD,OAAS,EAAG,CAC9C,IAAQ4C,EAAkBY,EAAS,GAA3BZ,cACFwB,EAAM9C,OAAOmC,QAAQb,GACxBc,QAAO,SAACjC,GAAD,OAAUA,EAAK,KAAO+B,EAAS,GAAGzB,YAC5CpC,KAAKC,SAAS,CACZwD,eAAiBI,EAAS,GAAG3D,OAASuE,EAAI,GAAG,GAAGR,MAGpD,GAAIJ,EAASxD,OAAS,EAAG,CACvB,IAAQoD,EAAkBzD,KAAKX,MAAvBoE,cACAR,EAAkBY,EAAS,GAA3BZ,cACFxB,EAAQE,OAAOmC,QAAQb,GAC1Bc,QAAO,SAACjC,GAAD,OAAUA,EAAK,KAAO+B,EAAS,GAAGzB,YACtCsC,GAAWb,EAAS,GAAG3D,OAASuB,EAAM,GAAG,GAAGwC,IAClDjE,KAAKC,SAAS,CACZwD,cAAgBA,EAAgBiB,O,oBAKtC,WACE,IAAQjB,EAAkBzD,KAAKX,MAAvBoE,cACAkB,EAAS3E,KAAKZ,MAAduF,KAER,OACE,6BACE,kBAAC,EAAD,CACErF,MAAQqF,EAAKrF,MACbmE,cAAgBA,IAElB,kBAAC,EAAD,CACET,OAAShD,KAAKgD,SAEhB,kBAAC,EAAD,CACEA,OAAShD,KAAKgD,c,GAlDH/B,IAAMC,WA2EZC,eAlBS,SAAC9B,GAAD,MAAY,CAClCsF,KAAMtF,EAAMsF,KACZrB,OAAQjE,EAAMiE,WAGW,SAACsB,GAAD,MAAe,CACxCJ,iBAAkB,kBAAMI,GTxCI,SAACA,GAC7BA,EApBqC,CACrCnE,KCVoB,WD+BpBiC,MADiB,+CAEdC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OAAc8B,EApB0B,CAChDnE,KCb2B,gBDc3BpB,MAkBsDyD,OACnD+B,OAAM,SAACC,GAAD,OAASF,EAhB6B,CAC/CnE,KCjB0B,eDkB1BpB,MAciDyF,cS8CpC3D,CAA6CoD,GCpE7CQ,E,4JAVb,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,YAAYC,UAAYV,IACpC,kBAAC,IAAD,CAAOS,KAAK,IAAIC,UAAY9F,S,GALlB+B,aCOEgE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BChBAC,EAAgB,CACpBjG,MAAO,IAaMqF,EAVF,WAAoC,IAAnCtF,EAAkC,uDAA1BkG,EAAeC,EAAW,uCAC9C,OAAQA,EAAO/E,MACf,IXRkB,OWShB,MAAO,CACLnB,MAAOkG,EAAOnG,MAAMC,OAExB,QAAS,OAAOD,I,QCTZkG,EAAgB,CACpBrC,WAAY,GACZW,SAAU,GACV4B,KAAM,MA4BOnC,EAzBA,WAAoC,IAAnCjE,EAAkC,uDAA1BkG,EAAeC,EAAW,uCAChD,OAAQA,EAAO/E,MACf,IZPoB,SYOP,OAAO,eACfpB,GAEL,IZT2B,gBYSP,OAAO,2BACtBA,GADe,IAElB6D,WAAYsC,EAAOnG,QAErB,IZZ0B,eYYP,OAAO,2BACrBA,GADc,IAEjBqG,MAAOF,EAAOE,QAEhB,IZrBwB,OYqBP,OAAO,2BACnBrG,GADY,IAEfwE,SAAS,GAAD,mBAAMxE,EAAMwE,UAAZ,CAAsB2B,EAAOnG,UAEvC,IZxByB,cYwBP,OAAO,2BACpBA,GADa,IAEhBwE,SAAUxE,EAAMwE,SAASE,QAAO,SAACjC,GAAD,OAAU0D,EAAOnG,QAAUyC,OAE7D,QAAS,OAAOzC,ICvBHsG,EAFKC,0BAAgB,CAAEjB,OAAMrB,WCM7BuC,EALDC,sBACZH,EACAI,8BAAoBC,0BAAgBC,OCEtCC,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAQA,GAChB,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJO,SAASC,eAAe,SLmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7D,MAAK,SAAA8D,GACJA,EAAaC,gBAEd7B,OAAM,SAAAa,GACLiB,QAAQjB,MAAMA,EAAMkB,c","file":"static/js/main.dd68c6c6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { userAccess } from '../actions/index';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      buttonOn: false,\n    };\n\n    this.submitStore = this.submitStore.bind(this);\n    this.getInputValue = this.getInputValue.bind(this);\n    this.form = this.form.bind(this);\n  }\n\n  getInputValue(e) {\n    switch (e.target.name) {\n    case 'email': this.setState({\n      email: e.target.value,\n      buttonOn: false,\n    });\n      break;\n    case 'password': this.setState({\n      password: e.target.value,\n    });\n      break;\n    default:\n    }\n    const { password, email } = this.state;\n    const required = 5;\n    const valid = /[a-zA-Z]+[@][a-z]+[.]+[a-z]/;\n    // método pesquisado no stackoverflow!\n    const result = valid.test(email);\n\n    if (password.length >= required && result) {\n      this.setState({\n        buttonOn: true,\n      });\n    }\n  }\n\n  submitStore() {\n    const { submit } = this.props;\n    const { email } = this.state;\n    submit({\n      email,\n    });\n  }\n\n  form(e) {\n    e.preventDefault();\n    this.setState({\n      email: '',\n      password: '',\n    });\n  }\n\n  render() {\n    const { buttonOn, email, password } = this.state;\n    return (\n      <div>\n        <form onSubmit={ this.form }>\n          <h1>Trybe</h1>\n          <input\n            type=\"email\"\n            name=\"email\"\n            value={ email }\n            data-testid=\"email-input\"\n            placeholder=\"Digite seu Email\"\n            onChange={ this.getInputValue }\n            required\n          />\n          <input\n            type=\"password\"\n            name=\"password\"\n            value={ password }\n            data-testid=\"password-input\"\n            onChange={ this.getInputValue }\n            required\n          />\n          <Link to=\"/carteira\">\n            <button\n              type=\"submit\"\n              disabled={ !buttonOn }\n              onClick={ this.submitStore }\n            >\n              Entrar\n            </button>\n          </Link>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispathc) => ({\n  submit: (state) => dispathc(userAccess(state)),\n});\n\nLogin.propTypes = {\n  submit: PropTypes.func.isRequired,\n};\nexport default connect(null, mapDispatchToProps)(Login);\n","import { USER, WALLET, WALLET_SUCESS,\n  WALLET_ERROR, FORMWALLET, DELETE_ITEM } from './actionTypes';\n\nexport const formWallet = (state) => ({\n  type: FORMWALLET,\n  state,\n});\n\nexport const userAccess = (state) => ({\n  type: USER,\n  state,\n});\n\nexport const walletCurrencies = () => ({\n  type: WALLET,\n});\n\nexport const walletCurrenciesSucess = (state) => ({\n  type: WALLET_SUCESS,\n  state,\n});\n\nexport const walletCurrenciesError = (state) => ({\n  type: WALLET_ERROR,\n  state,\n});\n\nexport const deletItem = (state) => ({\n  type: DELETE_ITEM,\n  state,\n});\n\nexport const fetchAPI = () => (dispatch) => {\n  dispatch(walletCurrencies());\n  const endPoint = 'https://economia.awesomeapi.com.br/json/all';\n  fetch(endPoint)\n    .then((data) => data.json())\n    .then((response) => dispatch(walletCurrenciesSucess(response)))\n    .catch((err) => dispatch(walletCurrenciesError(err)));\n};\n","export const USER = 'USER';\nexport const FORMWALLET = 'FORM';\nexport const DELETE_ITEM = 'DELETE_ITEM';\n\nexport const WALLET = 'WALLET';\nexport const WALLET_SUCESS = 'WALLET_SUCESS';\nexport const WALLET_ERROR = 'WALLET_ERROR';\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Currency extends Component {\n  render() {\n    const { htmlFor, nome,\n      array, id, onChange } = this.props;\n    return (\n      <div>\n        <label htmlFor={ htmlFor }>\n          {nome}\n          <select name={ nome } id={ id } onChange={ onChange }>\n            {Object.keys(array).map((item) => (\n              <option\n                key={ item }\n                value={ item }\n              >\n                { item }\n              </option>\n            ))}\n          </select>\n        </label>\n      </div>\n    );\n  }\n}\n\nCurrency.propTypes = {\n  htmlFor: PropTypes.string.isRequired,\n  nome: PropTypes.string.isRequired,\n  array: PropTypes.shape({}).isRequired,\n  id: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\nexport default Currency;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass LabelSelect extends Component {\n  render() {\n    const { htmlFor,\n      array, nome, target } = this.props;\n    return (\n      <div>\n        <label htmlFor={ htmlFor }>\n          {nome}\n          <select name={ nome } id={ nome } onChange={ target }>\n            {array.map((item) => (\n              <option key={ item } value={ item }>{item}</option>\n            ))}\n          </select>\n        </label>\n      </div>\n    );\n  }\n}\n\nLabelSelect.propTypes = {\n  htmlFor: PropTypes.string.isRequired,\n  array: PropTypes.arrayOf(PropTypes.string).isRequired,\n  nome: PropTypes.string.isRequired,\n  target: PropTypes.func.isRequired,\n};\nexport default LabelSelect;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass LabelInput extends Component {\n  render() {\n    const { htmlFor, type, id, onChange } = this.props;\n    return (\n      <div>\n        <label htmlFor={ htmlFor }>\n          {id}\n          <input\n            type={ type }\n            name={ id }\n            id={ id }\n            onChange={ onChange }\n          />\n        </label>\n      </div>\n    );\n  }\n}\n\nLabelInput.propTypes = {\n  htmlFor: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\nexport default LabelInput;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Currency from './Currency';\nimport LabelSelect from './LabelSelect';\nimport LabelInput from './LabelInput';\nimport { formWallet } from '../actions';\nimport './Form.css';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    };\n    this.getCrurrencies = this.getCrurrencies.bind(this);\n    this.inputValue = this.inputValue.bind(this);\n    this.submitStore = this.submitStore.bind(this);\n    this.qualquer = this.qualquer.bind(this);\n  }\n\n  getCrurrencies() {\n    const endPoint = 'https://economia.awesomeapi.com.br/json/all';\n    fetch(endPoint)\n      .then((data) => data.json())\n      .then((response) => this.qualquer(response));\n  }\n\n  qualquer(data) {\n    const arrayKeys = { ...data };\n    this.submitStore(arrayKeys);\n  }\n\n  inputValue(e) {\n    switch (e.target.name) {\n    case 'Valor': this.setState({ value: e.target.value });\n      break;\n    case 'Método de pagamento': this.setState({ method: e.target.value });\n      break;\n    case 'Moeda': this.setState({ currency: e.target.value });\n      break;\n    case 'Tag': this.setState({ tag: e.target.value });\n      break;\n    case 'Descrição': this.setState({ description: e.target.value });\n      break;\n    default:\n    }\n  }\n\n  submitStore(data) {\n    const { id, value, description, currency, method, tag } = this.state;\n    const { submit, gastos } = this.props;\n    submit({\n      id,\n      value,\n      currency,\n      method,\n      tag,\n      description,\n      exchangeRates: data,\n    });\n    gastos();\n    this.setState({ id: (id + 1) });\n  }\n\n  render() {\n    const { currencies } = this.props;\n    const newCurrencies = { ...currencies };\n    delete newCurrencies.USDT;\n    const payment = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n    const food = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n    return (\n      <form className=\"form\">\n        <LabelInput\n          htmlFor=\"Valor\"\n          type=\"text\"\n          nome=\"Valor\"\n          id=\"Valor\"\n          onChange={ this.inputValue }\n        />\n        <Currency\n          htmlFor=\"Moeda\"\n          id=\"Moeda\"\n          nome=\"Moeda\"\n          array={ newCurrencies }\n          onChange={ this.inputValue }\n        />\n        <LabelSelect\n          htmlFor=\"Método de pagamento\"\n          nome=\"Método de pagamento\"\n          array={ payment }\n          target={ this.inputValue }\n        />\n        <LabelSelect\n          htmlFor=\"Tag\"\n          nome=\"Tag\"\n          array={ food }\n          target={ this.inputValue }\n        />\n        <LabelInput\n          htmlFor=\"Descrição\"\n          type=\"text\"\n          id=\"Descrição\"\n          onChange={ this.inputValue }\n        />\n        <button\n          type=\"button\"\n          onClick={ this.getCrurrencies }\n        >\n          adicionar despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispathc) => ({\n  submit: (state) => dispathc(formWallet(state)),\n});\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n});\n\nForm.propTypes = {\n  currencies: PropTypes.shape({\n    ARS: PropTypes.shape({ code: PropTypes.string.isRequired }),\n    AUD: PropTypes.shape({ code: PropTypes.string.isRequired }),\n    BTC: PropTypes.shape({ code: PropTypes.string.isRequired }),\n    CAD: PropTypes.shape({ code: PropTypes.string.isRequired }),\n    CHF: PropTypes.shape({ code: PropTypes.string.isRequired }),\n    CNY: PropTypes.shape({ code: PropTypes.string.isRequired }),\n    DOGE: PropTypes.shape({ code: PropTypes.string.isRequired }),\n    ETH: PropTypes.shape({ code: PropTypes.string.isRequired }),\n    EUR: PropTypes.shape({ code: PropTypes.string.isRequired }),\n    GBP: PropTypes.shape({ code: PropTypes.string.isRequired }),\n    ILS: PropTypes.shape({ code: PropTypes.string.isRequired }),\n    JPY: PropTypes.shape({ code: PropTypes.string.isRequired }),\n    LTC: PropTypes.shape({ code: PropTypes.string.isRequired }),\n    USD: PropTypes.shape({ code: PropTypes.string.isRequired }),\n    USDT: PropTypes.shape({ code: PropTypes.string.isRequired }),\n    XRP: PropTypes.shape({ code: PropTypes.string.isRequired }),\n  }).isRequired,\n  submit: PropTypes.func.isRequired,\n  gastos: PropTypes.func.isRequired,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Header extends Component {\n  render() {\n    const { email, totalExpenses } = this.props;\n    return (\n      <header>\n        <span data-testid=\"email-field\">\n          Email:\n          { email }\n        </span>\n        <p>\n          Despesa Total:\n          <span data-testid=\"total-field\">\n            { totalExpenses.toFixed(2) }\n          </span>\n        </p>\n        <span data-testid=\"header-currency-field\">\n          BRL\n        </span>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  totalExpenses: PropTypes.number.isRequired,\n};\nexport default Header;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deletItem } from '../actions';\n\nclass TableTd extends Component {\n  constructor(props) {\n    super(props);\n    this.table = this.table.bind(this);\n    this.dispathc = this.dispathc.bind(this);\n  }\n\n  dispathc() {\n    const { wallet: { expenses } } = this.props;\n    const { submit, gastos } = this.props;\n    submit(expenses[0]);\n    gastos();\n  }\n\n  table() {\n    const { wallet: { expenses } } = this.props;\n\n    if (expenses.length > 1) {\n      const { exchangeRates } = expenses[1];\n      const array = Object.entries(exchangeRates)\n        .filter((item) => item[0] === expenses[1].currency);\n      const array2 = array[0][1].ask;\n      return (\n        <tr>\n          <td>{expenses[1].description}</td>\n          <td>{expenses[1].tag}</td>\n          <td>{expenses[1].method}</td>\n          <td>{expenses[1].value}</td>\n          <td>{array[0][1].name}</td>\n          <td>{(+array2).toFixed(2)}</td>\n          <td>{(expenses[1].value * array[0][1].ask).toFixed(2)}</td>\n          <td><p>Real</p></td>\n          <td>\n            <button\n              type=\"button\"\n              data-testid=\"delete-btn\"\n              onClick={ this.dispathc }\n            >\n              Delet\n            </button>\n          </td>\n        </tr>\n      );\n    }\n  }\n\n  render() {\n    const { wallet: { expenses }, counter } = this.props;\n    const { exchangeRates } = expenses[0];\n    const array = Object.entries(exchangeRates)\n      .filter((item) => item[0] === expenses[0].currency);\n    const array2 = array[counter][1].ask;\n    return (\n      <>\n        <tr>\n          <td>{expenses[counter].description}</td>\n          <td>{expenses[counter].tag}</td>\n          <td>{expenses[counter].method}</td>\n          <td>{expenses[counter].value}</td>\n          <td>{array[counter][1].name}</td>\n          <td>{(+array2).toFixed(2)}</td>\n          <td>{(expenses[counter].value * array[counter][1].ask).toFixed(2)}</td>\n          <td><p>Real</p></td>\n          <td>\n            <button\n              type=\"button\"\n              data-testid=\"delete-btn\"\n              onClick={ this.dispathc }\n            >\n              Delet\n            </button>\n          </td>\n        </tr>\n        { this.table() }\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  wallet: state.wallet,\n});\n\nconst mapDispatchToProps = (dispathc) => ({\n  submit: (state) => dispathc(deletItem(state)),\n});\n\nTableTd.propTypes = {\n  wallet: PropTypes.shape({\n    expenses: PropTypes.arrayOf(PropTypes.object),\n  }).isRequired,\n  counter: PropTypes.number.isRequired,\n  submit: PropTypes.func.isRequired,\n  gastos: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableTd);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './Table.css';\nimport TableTd from './TableTd';\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hearder: ['Descrição', 'Tag',\n        'Método de pagamento', 'Valor',\n        'Moeda', 'Câmbio utilizado', 'Valor convertido',\n        'Moeda de conversão', 'Editar/Excluir'],\n    };\n  }\n\n  render() {\n    const { hearder } = this.state;\n    const { wallet: { expenses }, gastos } = this.props;\n    if (expenses.length > 0) {\n      return (\n        <table className=\"table\">\n          <thead>\n            <tr>\n              {hearder.map((item, index) => (<th key={ index }>{item}</th>))}\n            </tr>\n          </thead>\n          <tbody>\n            <TableTd\n              counter={ 0 }\n              gastos={ gastos }\n            />\n          </tbody>\n        </table>\n      );\n    }\n    return (null);\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  wallet: state.wallet,\n});\n\nTable.propTypes = {\n  wallet: PropTypes.shape({\n    expenses: PropTypes.arrayOf(PropTypes.object),\n  }).isRequired,\n  gastos: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps)(Table);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport Form from '../components/Form';\nimport Header from '../components/Header';\nimport { fetchAPI } from '../actions/index';\nimport Table from '../components/Table';\n\nclass Wallet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalExpenses: 0,\n    };\n    this.gastos = this.gastos.bind(this);\n  }\n\n  componentDidMount() {\n    const { submitCurrencies } = this.props;\n    submitCurrencies();\n  }\n\n  gastos() {\n    const { wallet: { expenses } } = this.props;\n    if (expenses.length > 0 && expenses.length < 2) {\n      const { exchangeRates } = expenses[0];\n      const arr = Object.entries(exchangeRates)\n        .filter((item) => item[0] === expenses[0].currency);\n      this.setState({\n        totalExpenses: (+expenses[0].value * +arr[0][1].ask),\n      });\n    }\n    if (expenses.length > 1) {\n      const { totalExpenses } = this.state;\n      const { exchangeRates } = expenses[1];\n      const array = Object.entries(exchangeRates)\n        .filter((item) => item[0] === expenses[1].currency);\n      const total2 = (+expenses[1].value * +array[0][1].ask);\n      this.setState({\n        totalExpenses: (totalExpenses + total2),\n      });\n    }\n  }\n\n  render() {\n    const { totalExpenses } = this.state;\n    const { user } = this.props;\n\n    return (\n      <div>\n        <Header\n          email={ user.email }\n          totalExpenses={ totalExpenses }\n        />\n        <Form\n          gastos={ this.gastos }\n        />\n        <Table\n          gastos={ this.gastos }\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.user,\n  wallet: state.wallet,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  submitCurrencies: () => dispatch(fetchAPI()),\n});\n\nWallet.propTypes = {\n  submitCurrencies: PropTypes.func.isRequired,\n  user: PropTypes.shape({\n    email: PropTypes.string,\n  }).isRequired,\n  wallet: PropTypes.shape({\n    expenses: PropTypes.arrayOf(PropTypes.object),\n  }).isRequired,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nclass App extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route path=\"/carteira\" component={ Wallet } />\n        <Route path=\"/\" component={ Login } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { USER } from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case USER:\n    return {\n      email: action.state.email,\n    };\n  default: return state;\n  }\n};\n\nexport default user;\n","import { WALLET, WALLET_SUCESS, WALLET_ERROR,\n  FORMWALLET, DELETE_ITEM } from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  currencies: {},\n  expenses: [],\n  erro: null,\n};\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case WALLET: return {\n    ...state,\n  };\n  case WALLET_SUCESS: return {\n    ...state,\n    currencies: action.state,\n  };\n  case WALLET_ERROR: return {\n    ...state,\n    error: action.error,\n  };\n  case FORMWALLET: return {\n    ...state,\n    expenses: [...state.expenses, action.state],\n  };\n  case DELETE_ITEM: return {\n    ...state,\n    expenses: state.expenses.filter((item) => action.state !== item),\n  };\n  default: return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\n\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}